pipeline{
        agent any
        
        environment {
        //CREDS_USR for docker user, CREDS_PSW for docker pass
        CREDS = credentials("dockerhubimageid")
        MANAGER = credentials("SwarmManagerNodeSSH")
        MANAGERIP = "20.115.120.105"
        }
        
        stages{
            stage('Build'){
                steps{
                    sh "echo this is where the building happens"
                    sh "cat README.md"
                    sh "ls -al; pwd"
                    sh "echo cloning repo"
                    // sh "git clone https://github.com/hmahmood2351/HelloWorldFlask" - not needed, already in my repo
                    sh "echo building docker image - application"
                    sh "sudo docker build -t hmahmood2351/helloworldflask /var/lib/jenkins/workspace/testjob/Application/"
                    sh "echo ${CREDS_USR}; echo ${CREDS_PSW}"
                }
            }

            stage('Test'){
                steps{
                    sh "echo this is where the testing happens"
                }
            }

            stage('Deployment'){
                steps{
                    sh "echo this is where the deployment happens"

                    sh "echo logging into dockerhub"
                    sh "sudo docker login -u ${CREDS_USR} -p ${CREDS_PSW}"

                    sh "echo pushing Application image up to dockerhub"
                    sh "sudo docker push hmahmood2351/helloworldflask"

                    sh "echo logging out of dockerhub"
                    sh "sudo docker logout"

                    sh "echo sshing into swarm MANAGER node."

                    sshagent(credentials: ['SwarmManagerNodeSSH']) {
                        sh "echo this is ran inside the manager VM"
                    }

                    sh "echo cloning latest docker-compose.yaml from HelloFlaskApp repo"
                    sh "echo running docker stack deploy with the compose file - running or updating application"
                    sh "echo terminating ssh session"
                }
            }
        }
}
